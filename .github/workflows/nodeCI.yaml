name: nodeCI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: clientesdb
        options: >-
          --health-cmd pg_isready -U postgres
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: clientesdb
      PGHOST: 127.0.0.1
      PGPORT: 5432

    steps:
      # 1️⃣ Checkout do repositório
      - uses: actions/checkout@v3

      # 2️⃣ Configurar Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # 3️⃣ Instalar dependências
      - name: Install dependencies
        run: npm ci --include=dev

      # 4️⃣ Criar tabelas a partir do init.sql
      - name: Run init.sql
        run: psql -h 127.0.0.1 -U postgres -d clientesdb -f init.sql

      # 5️⃣ Rodar testes
      - name: Run tests
        run: npm test

      # 6️⃣ Executar migrations se houver
      - name: Execute migrations
        run: npm run migrate || echo "No migrations script found"

      # 7️⃣ Build do projeto se houver
      - name: Build project
        run: npm run build || echo "No build script found"

      # 8️⃣ Login no Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # 9️⃣ Construir e enviar imagem ao Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/node-ci-app:latest
